# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?
# 
# => 76576500

require 'fiber'

target = 500

triangle = Fiber.new do
  n = 1
  loop do
    t = n.downto(1).inject(:+)
    Fiber.yield [n, t]
    n += 1
  end
end

def prime_factors(n)
  return [] if n == 1
  f = (2..n).detect{ |x| (n % x).zero? }
  [f] + prime_factors(n / f)
end

def num_factors(n)
  pf = prime_factors(n)
  freq = Hash.new(0)
  pf.each{ |i| freq[i] += 1 }
  freq.inject(1){ |t,(k,v)| t * (v+1) }
end

begin
  n, t = triangle.resume
  f = num_factors(t)
  puts "#{n} (#{t}): #{f}" 
end until f > target
